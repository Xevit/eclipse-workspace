<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Extending Eclipse Che 7 to use VS Code extensions</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/TXZZwQRF5bo/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="Eclipse Che 7" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Theia" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="VS Code Extensions" scheme="searchisko:content:tags" /><author><name>Florent Benoit</name></author><id>searchisko:content:id:jbossorg_blog-extending_eclipse_che_7_to_use_vs_code_extensions</id><updated>2019-01-22T13:00:06Z</updated><published>2019-01-22T13:00:06Z</published><content type="html">&lt;p&gt;Recently the Eclipse Che community has been working to make Eclipse Theia the default web IDE for Eclipse Che 7. We’ve added a plugin model to Eclipse Theia that is compatible with &lt;a href="https://developers.redhat.com/blog/category/vs-code/"&gt;Visual Studio Code&lt;/a&gt; (VS Code) extensions. Che 7 users will eventually be able to take advantage of extensions that have been written for VS Code in their cloud-based developer workspaces. It&amp;#8217;s worth pointing out the popularity of VS Code extensions. Red Hat has &lt;a href="https://marketplace.visualstudio.com/publishers/redhat"&gt;contributed extensions&lt;/a&gt; covering &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.java"&gt;Java&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2018/12/04/xml-language-server-vscode-extension/"&gt;XML&lt;/a&gt;, &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.vscode-yaml"&gt;YAML&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2018/11/28/announcing-red-hat-openshift-extension-for-visual-studio-code-public-preview/"&gt;OpenShift&lt;/a&gt;, and &lt;a href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;dependency analytics&lt;/a&gt;. The Java extension provided by Red Hat has been downloaded over 10 million times!&lt;/p&gt; &lt;p&gt;If you aren&amp;#8217;t familiar with Eclipse Theia, Che 6 and earlier used a GWT-based IDE. While it is possible to develop and use plugins in that environment, it is cumbersome. Coming from tools like VS Code, developers expect to be able to customize and extend their workspaces at runtime. Eclipse Theia is an extensible open-source framework to develop multi-language IDEs using state-of-the-art web technologies. Moving to Theia as the default IDE for Che 7 provides a foundation to enrich the developer workspaces in Che. See the &lt;a href="https://developers.redhat.com/blog/2018/12/18/eclipse-che-7-coming-part-1/"&gt;series of articles by Stevan LeMeur&lt;/a&gt; for more information about what&amp;#8217;s coming in Che 7.&lt;/p&gt; &lt;p&gt;This article explains why we decided to add the new plugin model to Eclipse Theia and the benefits for Eclipse Che 7 developer workspaces. I also cover how the new plugin model differs from the existing Theia extension model.&lt;span id="more-554947"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Drawbacks of the previous GWT-based IDE&lt;/h2&gt; &lt;p&gt;There were a number drawbacks with the GWT-based IDE used in Che 6 and earlier. Adding a plugin requires stopping, recompiling, and reloading the whole IDE. Experiments were tried to dynamically load JavaScript plugins using &lt;a href="http://www.gwtproject.org/doc/latest/DevGuideCodingBasicsJsInterop.html"&gt;JS-Interop&lt;/a&gt;. The GWT-based IDE provided a low-level API with the advantage that you could change anything, but the disadvantage is any plugin could break anything. Also, it is difficult to understand all of the entry points for the current API.&lt;/p&gt; &lt;p&gt;In the end, we also had to take into consideration that many people dislike GWT and feel it is a technology of the past.&lt;/p&gt; &lt;h2&gt;Requirements for extensibility&lt;/h2&gt; &lt;p&gt;Based on our experiences, a lot of people wanted to improve the extensibility model for the next major version of Eclipse Che. For Che 7, we came up with the following requirements:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;It should be easy to load plugins at runtime and it should not involve any extra compilation or installation steps. Therefore, plugins should be already compiled. The IDE only needs to load the code.&lt;/li&gt; &lt;/ol&gt; &lt;p id="bdyjACz"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png"&gt;&lt;img class=" aligncenter wp-image-555027 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png" alt="Requirement 1: Fast loading of Che workspace" width="527" height="109" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4129ec76aa4-300x62.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;A poorly written plugin should not be able to break the whole IDE. If the user loads a plugin that has an error, the user should still be able to continue to use the current IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="pFkMnHB"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png"&gt;&lt;img class=" aligncenter wp-image-555037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png" alt="Requirement 2: Secure loading" width="527" height="122" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a1b12d2f-300x69.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;In Eclipse Che, we wanted to guarantee that a plugin can&amp;#8217;t block the main functions of the IDE like opening a file or typing. The user should be able to identify whether a problem is caused by a plugin or is an issue with the core product itself.  If two plugins have a requirement for different/conflicting versions of a dependency, that should be allowed and shouldn&amp;#8217;t cause problems. Each plugin should get the specific version of the dependency it requires.&lt;/li&gt; &lt;/ol&gt; &lt;p id="bnjuKSW"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png"&gt;&lt;img class=" aligncenter wp-image-555047 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png" alt="Requirement 3: Code isolation" width="527" height="130" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c.png 527w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a33d884c-300x74.png 300w" sizes="(max-width: 527px) 100vw, 527px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Drawbacks of the Theia extension model&lt;/h2&gt; &lt;p&gt;Eclipse Theia was chosen as the alternative IDE for Che 7 and beyond.  Theia has an extension model, which we&amp;#8217;ll refer to as Theia extensions. The problem with the existing extension model was that it was mainly designed to develop custom IDEs. As a result, it has the similar drawbacks when developers try to customize their development workspace at runtime the way they can in VS Code:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;With Eclipse Theia extensions, when a new extension is added, the whole IDE is recompiled. If there are errors introduced by the extension, you may break the whole IDE. So after adding an extension, you could open a Che workspace and wind up with a blank page due to a compilation error instead of the IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="yPQpbpR"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png"&gt;&lt;img class=" aligncenter wp-image-555057 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png" alt="Drawback 1: When a new extension is added, the whole IDE is recompiled" width="480" height="78" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a8261403-300x49.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;Extensions are retrieved from the &lt;code&gt;npmjs&lt;/code&gt; repository. While this can be nice because &lt;code&gt;npmjs&lt;/code&gt; has tons of libraries, when you install an extension it will download all dependencies again and again. If you’ve many dependencies, it may break. Additionally, you aren&amp;#8217;t able to add a local repository for private extensions.&lt;/li&gt; &lt;/ol&gt; &lt;p id="jOEUGfY"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png"&gt;&lt;img class=" aligncenter wp-image-555067 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png" alt="Drawback 2: Extensions are retrieved from the npmjs repository." width="480" height="62" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412a9a3d4e0-300x39.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li id="VAKlfNg"&gt;Theia extensions allow extension writers to customize the whole IDE. However similar to the GWT-based IDE, any extension can easily break the whole IDE. Diagnosis can be difficult.&lt;/li&gt; &lt;/ol&gt; &lt;p id="XCQRDzD"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png"&gt;&lt;img class=" aligncenter wp-image-555077 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png" alt="Drawback 3: Any extension can easily break the whole IDE" width="480" height="134" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412aba63d45-300x84.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="4"&gt; &lt;li&gt;The complexity of the extension model is too challenging for new developers. The Theia extension model has a lot of power that is great for advanced users; however, if you want to write your first extension, you need to master &lt;a href="http://inversify.io/"&gt;inverify&lt;/a&gt; and dependency injection. You also need to know which class is doing what and which interface you need to implement.&lt;/li&gt; &lt;/ol&gt; &lt;p id="DBYgJDc"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png"&gt;&lt;img class=" aligncenter wp-image-555107 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png" alt="Drawback 4: The extension model is too challenging for new developers" width="480" height="121" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a.png 480w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d8006a6a-300x76.png 300w" sizes="(max-width: 480px) 100vw, 480px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Clearly, Theia&amp;#8217;s extension model was not matching up with our requirements for extensibility.&lt;/p&gt; &lt;p id="WyILQtB"&gt;&lt;img class=" aligncenter wp-image-555087 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2.png 380w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412d156a4c2-300x300.png 300w" sizes="(max-width: 380px) 100vw, 380px" /&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Introducing Theia plugins&lt;/h2&gt; &lt;p&gt;At Red Hat, to meet our extensibility requirements we came up with the Theia Plugin Model.  The key aspects are:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Plugins can be loaded at any time at the runtime without having to restart/refresh the IDE.&lt;/li&gt; &lt;/ol&gt; &lt;p id="FsYgqQs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png"&gt;&lt;img class=" aligncenter wp-image-555117 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png" alt="Extensibility requirement 1: Plugins can be loaded at any time at the runtime" width="314" height="102" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175.png 314w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412df057175-300x97.png 300w" sizes="(max-width: 314px) 100vw, 314px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="2"&gt; &lt;li&gt;Eclipse Theia plugins are self-contained and packaged into .theia files.  They contain all the runtime code for the plugins. There is no need to download anything else at startup.&lt;/li&gt; &lt;/ol&gt; &lt;p id="rszlOoE"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png"&gt;&lt;img class=" aligncenter wp-image-555127 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png" alt="Extensibility requirement 1: Theia plugins are self-contained" width="317" height="107" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c412e513cb9b-300x101.png 300w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;ol start="3"&gt; &lt;li&gt;Theia plugins have a simple API that is easy to learn.  You can use a dependency injection framework, but you don&amp;#8217;t have to. It&amp;#8217;s your choice. The model is as simple as importing only one namespace, &lt;code&gt;@theia/plugin&lt;/code&gt; (through the &lt;code&gt;npmjs&lt;/code&gt; package &lt;code&gt;@theia/plugin&lt;/code&gt;), and you can get what you need from this entry point with code completion on this object. You implement the lifecycle of your plugin by implementing the &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; functions.&lt;/li&gt; &lt;/ol&gt; &lt;h2&gt;Sample code of a Theia plugin&lt;/h2&gt; &lt;pre&gt;import * as theia from '@theia/plugin'; export function start(context: theia.PluginContext) { const informationMessageTestCommand = { id: 'hello-world', label: "Hello World" }; context.subscriptions.push(theia.commands.registerCommand(informationMessageTestCommand, (...args: any[]) =&amp;#62; { theia.window.showInformationMessage('Hello World!'); })); } export function stop() { // commands automatically unregistered } &lt;/pre&gt; &lt;h2&gt;Theia plugin protocol&lt;/h2&gt; &lt;p id="ndcSQod"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png"&gt;&lt;img class=" aligncenter wp-image-555137 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png" alt="Theia plugin protocol " width="432" height="167" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f.png 432w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41300ae3f0f-300x116.png 300w" sizes="(max-width: 432px) 100vw, 432px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;Theia plugins use a protocol, which means you can run plugins anywhere! Some plugins can run in worker threads of the browser (they are called front-end plugins) or they can run on the server side in separate processes (back-end plugins). It’s easy to handle other kinds of namespace, including VS Code extensions.&lt;/p&gt; &lt;p&gt;Hear&amp;#8217;s an architecture diagram:&lt;/p&gt; &lt;p id="EjCfcdq"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png"&gt;&lt;img class=" aligncenter wp-image-555147 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png" alt="Architecture diagram" width="972" height="538" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5.png 972w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4130924d1a5-768x425.png 768w" sizes="(max-width: 972px) 100vw, 972px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;The model is backward-compliant. The plugin model is provided through a TypeScript declaration file. The plugin code could be completely rewritten or Theia classes could be refactored; however, the model will remain unchanged.&lt;/p&gt; &lt;p id="IjasIDV"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png"&gt;&lt;img class=" aligncenter wp-image-555157 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png" alt="The model is backward-compliant" width="432" height="101" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151.png 432w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41317703151-300x70.png 300w" sizes="(max-width: 432px) 100vw, 432px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The API is a high-level API designed so that plugins can&amp;#8217;t break the IDE. You might not be able to change everything you could think of in a plugin, but there are nearly unlimited possibilities to provide useful functionality for developers.&lt;/p&gt; &lt;h2&gt;Container-ready&lt;/h2&gt; &lt;p id="ZDcepfo"&gt;&lt;img class=" aligncenter wp-image-555167 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530.png 307w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530-150x150.png 150w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41324aec530-300x300.png 300w" sizes="(max-width: 307px) 100vw, 307px" /&gt;&lt;/p&gt; &lt;p&gt;Eclipse Che is using &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt; for developer tools. Theia plugins are written in TypeScript/Javascript and that works well. But sometimes, plugins writers need some dependencies that are not only pure &lt;code class="markup--code markup--p-code"&gt;npmjs&lt;/code&gt; dependencies. For example, if developers write a language server for Java, this plugin will probably require Java. So it might imply that the container that runs Eclipse Theia should have Java already installed on it.&lt;/p&gt; &lt;p&gt;This is why in Eclipse Che, it’s possible to run each Eclipse Theia plugin in its own container. This allows a plugin to use any system dependency it needs in its own container.&lt;/p&gt; &lt;p&gt;By default, all plugins are executed as a separate process in the Theia container:&lt;/p&gt; &lt;p id="TnZaqkh"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png"&gt;&lt;img class=" aligncenter wp-image-555197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-1024x380.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png" alt="All plugins are executed as a separate process in the Theia container" width="1060" height="393" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3.png 1060w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-300x111.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-768x285.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c41338c4e3f3-1024x380.png 1024w" sizes="(max-width: 1060px) 100vw, 1060px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;VS Code extensions&lt;/h2&gt; &lt;p&gt;The Eclipse Theia plugin protocol has been implemented in an extensible fashion and conforms to the VS Code API. This will allow some VS Code extensions to run inside of Theia. The API support will determine which extensions are compatible.&lt;/p&gt; &lt;p&gt;For example, it is currently possible to use the SonarLint VS Code extension from VS Code marketplace:&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png"&gt;&lt;img class=" aligncenter wp-image-555207 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png" alt="SonarLint Extension on the VS Code Marketplace" width="868" height="276" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095.png 868w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095-300x95.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135b44e095-768x244.png 768w" sizes="(max-width: 868px) 100vw, 868px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;After loading the SonarLint VS Code extension at runtime, you can see the immediate results in a JavaScript source file:&lt;/p&gt; &lt;p id="sFBBrDH"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png"&gt;&lt;img class=" aligncenter wp-image-555217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png" alt="Results in a JavaScript source file" width="985" height="479" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec.png 985w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec-300x146.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4135f4425ec-768x373.png 768w" sizes="(max-width: 985px) 100vw, 985px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here is the plugins view in Eclipse Theia after loading the VS Code extension:&lt;/p&gt; &lt;p id="todeNEs"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png"&gt;&lt;img class=" aligncenter wp-image-555227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png" alt="Plugins view in Eclipse Theia after loading the VS Code extension" width="304" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a.png 304w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/img_5c4136a319e1a-300x188.png 300w" sizes="(max-width: 304px) 100vw, 304px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id="0dee" class="graf graf--h3 graf--leading"&gt;Try Eclipse Che 7 now!&lt;/h2&gt; &lt;p id="8481" class="graf graf--p graf-after--h3 selectionShareable"&gt;Want to try to the new version of Eclipse Che 7?  Here’s how:&lt;/p&gt; &lt;p id="ca45" class="graf graf--p graf-after--p selectionShareable"&gt;Click the following factory URL:&lt;br /&gt; &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn" target="_blank" rel="nofollow noopener noopener noopener noopener" data-href="https://che.openshift.io/f?id=factoryvbwekkducozn3jsn"&gt;che.openshift.io/f?id=factoryvbwekkducozn3jsn&lt;/a&gt;&lt;/p&gt; &lt;p id="b4c8" class="graf graf--p graf-after--p selectionShareable"&gt;&lt;strong class="markup--strong markup--p-strong"&gt;Or, create your account&lt;/strong&gt; on &lt;a class="markup--anchor markup--p-anchor" href="https://che.openshift.io/" target="_blank" rel="noopener" data-href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;, &lt;strong class="markup--strong markup--p-strong"&gt;create a new workspace,&lt;/strong&gt; and select “Che 7” stack.&lt;/p&gt; &lt;p class="selectionShareable"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png" data-featherlight="image"&gt;&lt;img class="aligncenter wp-image-549977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png" sizes="(max-width: 640px) 100vw, 640px" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-1024x356.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-300x104.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift-768x267.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/12/che-on-openshift.png 1294w" alt="Try Eclipse Che 7 on OpenShift" width="640" height="223" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p class="selectionShareable"&gt;You can also test on your local machine, by installing the latest version of Eclipse Che. See &lt;em&gt;&lt;a class="markup--anchor markup--p-anchor" href="http://www.eclipse.org/che/docs/#getting-started" target="_blank" rel="noopener" data-href="http://www.eclipse.org/che/docs/#getting-started"&gt;Quick Start with Eclipse Che&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &lt;h2 id="1953" class="graf graf--h3 graf--leading"&gt;Want to learn more?&lt;/h2&gt; &lt;p id="b78e" class="graf graf--p graf-after--h3 selectionShareable"&gt;See the &lt;em&gt;Eclipse Che 7 is coming and it&amp;#8217;s really hot&lt;/em&gt; article series:&lt;/p&gt; &lt;ul class="postList"&gt; &lt;li id="2127" class="graf graf--li graf-after--p"&gt;Part 1—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-1-4-64d79b75ca02"&gt;Eclipse Che 7 overview, and introducing the new IDE&lt;/a&gt;&lt;/li&gt; &lt;li id="07b2" class="graf graf--li graf-after--li"&gt;Part 2—&lt;a class="markup--anchor markup--li-anchor" href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4" target="_blank" rel="noopener" data-href="https://che.eclipse.org/eclipse-che-7-is-coming-and-its-really-hot-2-4-2e2c6accbff4"&gt;Introducing the plugin model&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 3—&lt;a href="https://developers.redhat.com/blog/2018/12/20/eclipse-che-7-is-coming-and-its-really-hot-3-4/"&gt;Kube-native developer workspaces&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 4—&lt;a href="https://developers.redhat.com/blog/2018/12/21/eclipse-che-7-is-coming-and-its-really-hot-4-4/"&gt;Functionality for Enterprise Development Teams and schedule&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;For information about Che running on &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt;, see &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady WorkSpaces for OpenShift&lt;/a&gt; (currently in beta) and Doug Tidwell’s article and videos, &lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;&lt;em&gt;CodeReady Workspaces for OpenShift (Beta)–It works on their machines too&lt;/em&gt;&lt;/a&gt;. Doug covers stacks and workspaces and factories to help you get started with Che.&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#38;linkname=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F22%2Fextending-eclipse-che-7-to-use-vs-code-extensions%2F&amp;#038;title=Extending%20Eclipse%20Che%207%20to%20use%20VS%20Code%20extensions" data-a2a-url="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/" data-a2a-title="Extending Eclipse Che 7 to use VS Code extensions"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/"&gt;Extending Eclipse Che 7 to use VS Code extensions&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/TXZZwQRF5bo" height="1" width="1" alt=""/&gt;</content><summary>Recently the Eclipse Che community has been working to make Eclipse Theia the default web IDE for Eclipse Che 7. We’ve added a plugin model to Eclipse Theia that is compatible with Visual Studio Code (VS Code) extensions. Che 7 users will eventually be able to take advantage of extensions that have been written for VS Code in their cloud-based developer workspaces. It’s worth pointing out the popu...</summary><dc:creator>Florent Benoit</dc:creator><dc:date>2019-01-22T13:00:06Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/22/extending-eclipse-che-7-to-use-vs-code-extensions/</feedburner:origLink></entry><entry><title>My 2cents on the future of Integration - With Service Mesh/Istio and Serverless/KNative</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rUjVQtZJ3bM/my-2cents-on-future-of-integration-with.html" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_christinalineng" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>Christina Lin</name></author><id>searchisko:content:id:jbossorg_blog-my_2cents_on_the_future_of_integration_with_service_mesh_istio_and_serverless_knative</id><updated>2019-01-22T02:41:21Z</updated><published>2019-01-22T02:32:00Z</published><content type="html">&lt;br /&gt;It's been a year and half since I blogged about "Agile Integration architecture" (Gosh, time just flies). With the "microservices" and "cloud-native" hype, I was especially curious on how all these new concept and technology affect us on how to architect the integration systems. If you ever pay close attention to all the latest and greatest news from the Kubernetes community, I am sure you will hear a lot about the new "Service Mesh". And rumor has it that this is how integration can/should be done in cloud native world, but, is that so? Anyone who has ever worked on an integration project would tell you, it's a LOT more COMPLEX and can get worst overtime. I did a talk with Christian Posta in Red Hat Tech Exchange coming from a more comprehensive view of how different Red Hat technologies are applied under different patterns when building integration solutions. In fact he also did a great &lt;a href="http://blog.christianposta.com/microservices/application-safety-and-correctness-cannot-be-offloaded-to-istio-or-any-service-mesh/"&gt;blog&lt;/a&gt; about it.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://3.bp.blogspot.com/-RDXVzNMuwEA/XEaAbHkSXdI/AAAAAAAAFz4/5yMVmr5Umogr4KkCkKvw-DlcCupdpIRywCK4BGAYYCw/s1600/imageedit_10_3554669503.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="227" src="https://3.bp.blogspot.com/-RDXVzNMuwEA/XEaAbHkSXdI/AAAAAAAAFz4/5yMVmr5Umogr4KkCkKvw-DlcCupdpIRywCK4BGAYYCw/s400/imageedit_10_3554669503.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;Since then, another topics has been brought up numerous time, what about Serverless, how would it impact integration? Does it mean the death of services? &amp;nbsp;If we have all Microservices connected via Serviceless mechanism in service mesh, does that mean we go back to the old days of writing all the integration transformation logics in our application again? Obviously, this is complicated question to answer, and the new features keeps popping up, I am going to try to give my best to try and explain how I see everything fits into Agile Integration vision. Honestly, there is no exact right answer when it's about architecting system, it requires constant refactoring, my thought is to give a more general and flexible way of doing it that has less impact when change and being able to adapt change quickly. (That is what I call Agile Integration).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Service Mesh&amp;nbsp;&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;&lt;br /&gt;&lt;/u&gt;&lt;/b&gt;I remember last time, I started the agile integration reference architecture simply because the lack of organization of Microservices, and it still stand today. JUST because we have service mesh, doesn't mean it will magically solve the spaghetti connectivity if you are not being careful. To set the ground, what service mesh helps is to relief developer from dealing with repetitive, boring work in a distributed environment. Yes. Being cloud native with Microservices, means the system is more vulnerable to chain reaction disaster if not designed correctly, as you are working with small bots and gears in the system, that you never know how any small missed-handle can impact the entire system. Therefore we need to make each component more robust, failure proof and ideally damage recoverable. And Service Mesh helps you with getting the BASICs ready by adding a sidecar next to your running application. For every Microservices you create, no matter what they do, core business or content orchestration, they all need some kind of failure proof. Service Mesh gives you all that, from an application networking level. So that as a developer you will no longer have to wrap every single one of your Microservices with the circuit breaker, error retry and even handling version, deployment routing, and apply authorization, &amp;nbsp;those that has NOTHING to do with what the actually app is responsible for. These are often common rules that applies to the whole cluster. And service mesh is best for that, as these common policies are detached from actual application, can be managed centrally and apply individual on the sidecar so the microservice running your app is protected behind it.&lt;br /&gt;&lt;a href="http://2.bp.blogspot.com/-5O9JKK2ujcI/XEZ9_skvmHI/AAAAAAAAFzc/9DsEZcTa9JI1FqXar-Yt-WkpTOKKAp5UwCK4BGAYYCw/s1600/imageedit_6_9445908844.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img border="0" height="378" src="https://2.bp.blogspot.com/-5O9JKK2ujcI/XEZ9_skvmHI/AAAAAAAAFzc/9DsEZcTa9JI1FqXar-Yt-WkpTOKKAp5UwCK4BGAYYCw/s400/imageedit_6_9445908844.png" width="400" /&gt;&lt;/a&gt;&lt;br /&gt;Another great feature with service mesh, is to ability to trace and observe the incoming request for the entire system. This will certainly help developer/operation have more insight into the complex spider web-like connectivity.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Dealing with REAL Life Integration&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;But when it comes to actually application implementation, some folks thinks we can now rely on Service Mesh to configure and connect. &lt;i&gt;MAYBE&lt;/i&gt;, if you are developing only a couple of small microservices, you can probably get away from that. BUT that is not what's happening in real life. For instance, formatting the data to the right granularity (Splitting/Aggregation), routing base on processing outcome of some content, a more complex orchestration of services call that requires precise rollback and business handling (Saga) , collection of events triggering, we can't possibly write all these into the Service Mesh config yml file (I am just being practical :p). So, I am sure now we have mutual agreement that integration logic still needs be written somewhere, DON'T tried to do it in your microservice with the business logic. That is why we need the conceptual layer in agile integration. They are the composite and core layer. Remember, &amp;nbsp;I mean CONCEPTUAL not physically on top of another, but separating the responsibility of the microservices so it's easier to locate, maintain and organize your applications. Taken from the lesson learnt from SOA. You will still need some kind of integration patterns to compose service that has the right granularity for the receiving end. &lt;br /&gt;&lt;br /&gt;Monitoring and tracing is crucial in ANY integration system, and let's face it, there are NOT JUST http calls. Majority of times, they are events, and honestly an event driven reactive system is 100 times more flexible and modularize than sticking a bunch of API together. To be able to collect these data are needed beyond simple request tracing. &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Serverless&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;a href="http://2.bp.blogspot.com/-msZJiT5Io64/XEZ_AlP75dI/AAAAAAAAFzs/qxMRGse0dokB4XntguAJZcmMt9CHDhZwgCK4BGAYYCw/s1600/imageedit_8_5274947810.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="640" src="https://2.bp.blogspot.com/-msZJiT5Io64/XEZ_AlP75dI/AAAAAAAAFzs/qxMRGse0dokB4XntguAJZcmMt9CHDhZwgCK4BGAYYCw/s640/imageedit_8_5274947810.png" width="456" /&gt;&lt;/a&gt;I had to talk about this, the whole serverless development, deployment and runtime concept can take agile integration in another level not just conceptually but physically too. The idea of quickly spin up integration piece of logic, the ability to scale freely up and down. That is what I call true agility. I was thrilled to see Nicola demonstrate&lt;a href="https://www.nicolaferraro.me/2018/12/10/camel-k-on-knative/"&gt; Camel-K on KNative&lt;/a&gt;. &amp;nbsp;Camel just opens up a wide range of connect possibility for the serverless call. To me the core spirits of server less is (For now)&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Being able to quickly produce/start application without complex configuration and heavy runtime.&amp;nbsp;&lt;/li&gt;&lt;li&gt;Elastic resource allocation responding to loads.&amp;nbsp;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;And what integration helps to bring to the table is the ability to allow the system to responds more events from boarder range of endpoints, for instance, IoT, SOAP and messaging and other protocol that are not simple http calls.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;This is just a HIGH level overview of how I see Integration are shaped in the future of a serverless cloud native world. Of course I have not touch upon many topics like APIs, Event driven architecture, self service ability. They deserve separate blogs. Might do another later this week. Again, these are just my 2cents coming out from a more practical real life point of view.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/blogspot/hFXzh/~4/vkpk8RmfbD8" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rUjVQtZJ3bM" height="1" width="1" alt=""/&gt;</content><summary>It's been a year and half since I blogged about "Agile Integration architecture" (Gosh, time just flies). With the "microservices" and "cloud-native" hype, I was especially curious on how all these new concept and technology affect us on how to architect the integration systems. If you ever pay close attention to all the latest and greatest news from the Kubernetes community, I am sure you will he...</summary><dc:creator>Christina Lin</dc:creator><dc:date>2019-01-22T02:32:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/blogspot/hFXzh/~3/vkpk8RmfbD8/my-2cents-on-future-of-integration-with.html</feedburner:origLink></entry><entry><title>Hibernate ORM 5.4.1.Final released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4dylmMet1Ec/" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>Guillaume Smet</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_orm_5_4_1_final_released</id><updated>2019-01-22T08:27:50Z</updated><published>2019-01-22T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just released the first maintenance release of Hibernate ORM 5.4.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;It is designed to be a drop in replacement for ORM 5.4.0.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="sect2"&gt; &lt;h3 id="bugfixes-and-documentation-improvements"&gt;&lt;a class="anchor" href="#bugfixes-and-documentation-improvements"&gt;&lt;/a&gt;Bugfixes and documentation improvements&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We fixed several regressions and improved the documentation. Some regressions are specific to 5.4 but some others are also affecting older versions.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;You can find the full list of changes in this version &lt;a href="https://hibernate.atlassian.net/projects/HHH/versions/31726/tab/release-report-all-issues"&gt;here&lt;/a&gt; (or, for people without a Hibernate Jira account, &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?version=31726&amp;amp;styleName=Html&amp;amp;projectId=10031"&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="getting-5-4-1-final"&gt;&lt;a class="anchor" href="#getting-5-4-1-final"&gt;&lt;/a&gt;Getting 5.4.1.Final&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/orm/releases/5.4/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-next"&gt;&lt;a class="anchor" href="#what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We will release regular maintenance releases thereafter but the main focus of development is now Hibernate ORM 6.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the usual channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/tagged/hibernate"&gt;&lt;strong&gt;hibernate&lt;/strong&gt; tag on Stack Overflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-orm"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HHH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4dylmMet1Ec" height="1" width="1" alt=""/&gt;</content><summary>We just released the first maintenance release of Hibernate ORM 5.4. It is designed to be a drop in replacement for ORM 5.4.0. What’s new Bugfixes and documentation improvements We fixed several regressions and improved the documentation. Some regressions are specific to 5.4 but some others are also affecting older versions. You can find the full list of changes in this version here (or, for peopl...</summary><dc:creator>Guillaume Smet</dc:creator><dc:date>2019-01-22T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/01/22/hibernate-orm-541-final-out/</feedburner:origLink></entry><entry><title>Serverless and Knative: Installation through Deployment</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XO9g8bCwLlY/" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="devnation" scheme="searchisko:content:tags" /><category term="DevNation Live" scheme="searchisko:content:tags" /><category term="FaaS" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Functions-as-a-Service" scheme="searchisko:content:tags" /><category term="Knative" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>David David</name></author><id>searchisko:content:id:jbossorg_blog-serverless_and_knative_installation_through_deployment</id><updated>2019-01-21T19:57:30Z</updated><published>2019-01-21T19:57:30Z</published><content type="html">&lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/-8fW1x5biCw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/topics/serverless-architecture/"&gt;Serverless&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/knative/"&gt;Knative&lt;/a&gt; and FaaS will change your workflow as much as any change to design patterns in your career.&lt;/p&gt; &lt;p&gt;In this video, Red Hat&amp;#8217;s &lt;a href="https://twitter.com/kamesh_sampath"&gt;Kamesh Sampath&lt;/a&gt; will deep dive all about Knative.&lt;/p&gt; &lt;p&gt;Reusable components that focus on solving many mundane but difficult tasks like orchestrating source-to-container workflows, routing and managing traffic during deployment, autoscaling your workloads, or binding running services to eventing ecosystems free developers to work on more interesting coding.&lt;/p&gt; &lt;p&gt;In this webinar, we’ll install Knative and its components and take an in-depth look into:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The building blocks of Knative—such as serving, building and eventing ecosystems.&lt;/li&gt; &lt;li&gt;Demystify the deployment model that allows you to deploy your cloud-native services on Kubernetes and easily turn serve them as serverless services.&lt;/li&gt; &lt;li&gt;Various deployment strategies, such as latest and pinned, and how to use Knative build to convert a source-to-URL (serverless service).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#38;linkname=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fserverless-and-knative-installation-through-deployment%2F&amp;#038;title=Serverless%20and%20Knative%3A%20Installation%20through%20Deployment" data-a2a-url="https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/" data-a2a-title="Serverless and Knative: Installation through Deployment"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/"&gt;Serverless and Knative: Installation through Deployment&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XO9g8bCwLlY" height="1" width="1" alt=""/&gt;</content><summary>Serverless, Knative and FaaS will change your workflow as much as any change to design patterns in your career. In this video, Red Hat’s Kamesh Sampath will deep dive all about Knative. Reusable components that focus on solving many mundane but difficult tasks like orchestrating source-to-container workflows, routing and managing traffic during deployment, autoscaling your workloads, or binding ru...</summary><dc:creator>David David</dc:creator><dc:date>2019-01-21T19:57:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/21/serverless-and-knative-installation-through-deployment/</feedburner:origLink></entry><entry><title>Streamline your JBoss EAP dev environment with Red Hat CodeReady Workspaces: Part 1</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/AZEgHZ9dA10/" /><category term="App Dev" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="development environment" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="ide" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="Red Hat JBoss EAP" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Enterprise Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Laurent Broudoux</name></author><id>searchisko:content:id:jbossorg_blog-streamline_your_jboss_eap_dev_environment_with_red_hat_codeready_workspaces_part_1</id><updated>2019-01-21T13:00:07Z</updated><published>2019-01-21T13:00:07Z</published><content type="html">&lt;p&gt;It has been just one month since the announcement of the release of &lt;a href="https://developers.redhat.com/blog/2018/12/11/codeready-workspaces-openshift/"&gt;Red Hat CodeReady Workspaces 1.0.0 Beta&lt;/a&gt;. Because the cloud/browser-based IDE may be full of promises, developers are usually suspicious, considering them as toys for occasional coders but not suitable for software craftsmen. But you&amp;#8217;ll quickly see that Red Hat&amp;#8217;s offering can be a good companion for building tailor-made environments.&lt;/p&gt; &lt;p&gt;The goal of this two-part series is to give a walk-through of using Red Hat CodeReady Workspaces to develop a &lt;a href="https://developers.redhat.com/topics/enterprise-java/"&gt;Java EE&lt;/a&gt; (now Jakarta EE) application using &lt;a href="https://developers.redhat.com/products/eap/overview/"&gt;Red Hat JBoss Enterprise Application Platform&lt;/a&gt; (JBoss EAP). I’ll give you details on how to bring your own tools, configure your workspace with helpful commands for JBoss EAP, and share everything so you can easily onboard new developers.&lt;/p&gt; &lt;p&gt;&lt;span id="more-553677"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Red Hat CodeReady Workspaces&lt;/h2&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview/"&gt;Red Hat CodeReady Workspaces&lt;/a&gt; is built on the Eclipse Che open source project and offers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Centralized configuration management of development workspaces&lt;/li&gt; &lt;li&gt;Secured access to the development environment with source code that may remain on the central server, not the developer’s laptop&lt;/li&gt; &lt;li&gt;Extensible configuration allowing you to bring your own tools and reuse the runtimes you’ll use in production&lt;/li&gt; &lt;li&gt;A rich, browser-based development experience including auto-completion, navigation, debuggers, and easy sharing through the factory concept&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The entire product runs on a &lt;a href="http://openshift.com/"&gt;Red Hat OpenShift&lt;/a&gt; cluster (on-premises or in the cloud), so there’s nothing to install on your machine. The &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/"&gt;installation instructions&lt;/a&gt; give details on how to set up everything on your OpenShift cluster; installation is done through an &lt;a href="https://developers.redhat.com/blog/2018/05/23/customizing-an-openshift-ansible-playbook-bundle/"&gt;Ansible PlayBook Bundle&lt;/a&gt; running on the cluster Ansible Service Broker. Although it makes extensive use of &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;containers&lt;/a&gt; technology for installation, defining your stacks, and configuring your workspaces, it is not exclusively dedicated to the development of applications running as containers. That’s what I’m trying to demonstrate throughout this post.&lt;/p&gt; &lt;p&gt;So, have you’ve got your Red Hat CodeReady Workspaces set up? Let’s dive into this JBoss EAP tour!&lt;/p&gt; &lt;h2&gt;Defining your custom stack&lt;/h2&gt; &lt;p&gt;A Red Hat CodeReady Workspaces stack is the basic building block for workspaces: it includes everything you may need for compiling, testing, debugging, or packaging your app. Even though the Red Hat CodeReady Workspaces installation comes with default stacks for many technologies (Java, JBoss EAP, Spring Boot, NodeJS, Python, and so on), extending them and creating your own stack is a common practice. Stacks are based on one or many container images and as such, providing stacks is basically a matter of writing Dockerfiles and building images.&lt;/p&gt; &lt;p&gt;Some common use cases, imagine your organization uses self-signed certificates to access infrastructure or you have started working with containerized apps on OpenShift and find it convenient to also use the &lt;code&gt;oc&lt;/code&gt; or the &lt;code&gt;odo&lt;/code&gt; command-line tools. You may have to extend the default &lt;code&gt;stacks-java:1.0.0.Beta1&lt;/code&gt; provided by Red Hat—which already includes OpenJDK, JBoss EAP, and Maven—in order to add your custom CA certificate and the tools you need:&lt;/p&gt; &lt;pre&gt;FROM registry.access.redhat.com/codeready-workspaces-beta/stacks-java:1.0.0.Beta1 ADD ca.crt /etc/pki/ca-trust/source/anchors/ca.crt RUN sudo update-ca-trust USER root RUN echo yes | keytool -keystore /etc/pki/java/cacerts -importcert \ -alias HOSTDOMAIN -file /etc/pki/ca-trust/source/anchors/ca.crt \ -storepass changeit RUN curl -LO https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz &amp;#38;&amp;#38; \ tar xvf openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz RUN mv openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit/oc /usr/local/bin/oc &amp;#38;&amp;#38; \ chmod +x /usr/local/bin/oc&lt;/pre&gt; &lt;p&gt;Once you have produced this &lt;code&gt;Dockerfile&lt;/code&gt; and put your &lt;code&gt;ca.crt&lt;/code&gt; file in same directory, you just have to build your image and push it into a container images registry that is made available to your OpenShift cluster.&lt;/p&gt; &lt;pre&gt;$ docker build --tag lbroudoux/stacks-java:1.0.0.Beta2 . $ docker push lbroudoux/stacks-java:1.0.0.Beta2&lt;/pre&gt; &lt;p&gt;Above, I’ve put my image on docker.io and you may easily reuse mine for a quick test. Then, we may start building a custom Red Hat CodeReady Workspace stack from the administration console.&lt;/p&gt; &lt;p&gt;Click on the &lt;em&gt;Stacks&lt;/em&gt; left menu and review the default stack. Then you just have to click the &lt;em&gt;Add Stack&lt;/em&gt; button to make a modal dialog appear, asking you for a &lt;em&gt;Recipe&lt;/em&gt;. For this article, we are going to create a single container stack, so just select the &lt;em&gt;DOCKERIMAGE&lt;/em&gt; thumbnail and enter the name of the Docker image we previously created: &lt;code&gt;docker.io/lbroudoux/stacks-jaba:1.0.0.Beta2&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After having verified that the image exists, we navigate to the form allowing you to configure your stack. So start by assigning it a &lt;em&gt;Name&lt;/em&gt; and a &lt;em&gt;Description&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name.png"&gt;&lt;img class=" aligncenter wp-image-553747 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name-1024x156.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name-1024x156.png" alt="Assigning a name and description to the stack" width="640" height="98" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name-1024x156.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name-300x46.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-name-768x117.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Scroll down to the &lt;em&gt;Machines&lt;/em&gt; section. Here we have a single &lt;em&gt;Machine&lt;/em&gt; and we decide to name it &lt;em&gt;dev-machine&lt;/em&gt;. We can check that our machine will be based on the container image we provide and we may also adjust the number of resources that will be dedicated to this machine. There&amp;#8217;s more info on the machine &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/administering_workspaces#machine"&gt;here.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine.png"&gt;&lt;img class=" aligncenter wp-image-553757 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine-1024x188.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine-1024x188.png" alt="Machines section" width="640" height="118" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine-1024x188.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine-300x55.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-machine-768x141.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Scrolling down, we can check the &lt;em&gt;Agents&lt;/em&gt; (or &lt;em&gt;Installers&lt;/em&gt;) section. Agents allow you to activate specific features of the Eclipse Che IDE. Here, we’ll need the basic one for dealing with Java: being able to execute commands, opening a terminal, and interacting with the Workspace API. More info on installers is available &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/administering_workspaces#installer"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents.png"&gt;&lt;img class=" aligncenter wp-image-553777 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents-1024x717.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents-1024x717.png" alt="Installers section" width="640" height="448" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents-1024x717.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents-300x210.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-agents-768x538.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Below that is a very important part of the stack configuration where you may define the different &lt;em&gt;Servers&lt;/em&gt; that will expose your machine. A servers definition allows you to declare the network ports that will be exposed by your workspace and that your developers will use for interacting and connecting to the app. In the case of our JBoss EAP development environment, we’ll declare two ports:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Port 8080 will allow regular interaction with the JBoss EAP application server.&lt;/li&gt; &lt;li&gt;Port 8000 will be used for remote debugging the deployed application.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;More info on servers is available &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/administering_workspaces#servers"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers.png"&gt;&lt;img class=" aligncenter wp-image-553797 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers-1024x228.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers-1024x228.png" alt="Servers section" width="640" height="143" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers-1024x228.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers-300x67.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-servers-768x171.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The next section is related to &lt;em&gt;Commands&lt;/em&gt;. Here we’re going to add a single command for building the whole project using Maven. We’ll add some other commands during our first tests of a new workspace. Commands are used to build, debug your app and interact with your server. More info on commands is &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_codeready_workspaces_for_openshift/1.0.0/html/administration_guide/administering_workspaces#commands"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands.png"&gt;&lt;img class=" aligncenter wp-image-553817 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands-1024x125.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands-1024x125.png" alt="Commands section" width="640" height="78" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands-1024x125.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands-300x37.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-commands-768x94.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Finally, you may end by adding a description for &lt;em&gt;components&lt;/em&gt; embedded in your stack. These descriptions are pure informational components and help with &lt;em&gt;tags&lt;/em&gt; to organize your stack within the repository.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components.png"&gt;&lt;img class=" aligncenter wp-image-553827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components-1024x212.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components-1024x212.png" alt="Adding descriptions for components" width="640" height="133" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components-1024x212.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components-300x62.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-stack-components-768x159.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Once you have finished editing these last sections, you may now &lt;em&gt;save&lt;/em&gt; your stack for later use through JBoss EAP workspaces. You can also check that everything you&amp;#8217;ve done is exportable as JSON and can be versioned and saved into a Git repository. Just click the &lt;em&gt;Show&lt;/em&gt; button within the &lt;em&gt;Raw Configuration&lt;/em&gt; section. Everything we’ve seen and done so far can be found in my &lt;a href="https://github.com/lbroudoux/codeready-workspaces"&gt;github.com/lbroudoux/codeready-workspaces&lt;/a&gt; repository.&lt;/p&gt; &lt;h2&gt;Starting a JBoss EAP workspace&lt;/h2&gt; &lt;p&gt;Now that we have a stack to build on, we may create a new workspace. So from the dashboard or the Workspaces page of Red Hat CodeReady Workspaces, just click the &lt;em&gt;Add Workspace&lt;/em&gt; button. Creating a workspace starts by giving it a &lt;em&gt;Name&lt;/em&gt; and picking the stack we previously created, as shown below.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name.png"&gt;&lt;img class=" aligncenter wp-image-553847 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name-1024x506.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name-1024x506.png" alt="Creating a workspace" width="640" height="316" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name-1024x506.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-name-768x379.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Workspaces are there for working on projects, so within the &lt;em&gt;Projects&lt;/em&gt; section, be sure to add a new project. You can, for example, refer to one located on GitHub. I used &lt;a href="https://github.com/lbroudoux/openshift-tasks"&gt;github.com/lbroudoux/openshift-tasks&lt;/a&gt;, which is a JEE/JBoss EAP app I’ve used for demonstrating deployment on OpenShift, even though in our case, we’ll deploy the application to a regular, not containerized, JBoss EAP instance.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project.png"&gt;&lt;img class=" aligncenter wp-image-553857 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project-1024x243.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project-1024x243.png" alt="Adding a project" width="640" height="152" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project-1024x243.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project-300x71.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-project-768x183.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Leave untouched the other options and then create and run your workspace. In a few minutes, you should have a working IDE where a project has been cloned from GitHub and all the dev tools such as Java Language Server have started up into the &lt;code&gt;dev-machine&lt;/code&gt; console.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open.png"&gt;&lt;img class=" aligncenter wp-image-553867 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open-1024x674.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open-1024x674.png" alt="Running the new workspace" width="640" height="421" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open-1024x674.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open-300x198.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/crw-workspace-open-768x506.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;To be continued&amp;#8230;&lt;/h2&gt; &lt;p&gt;In this first part of the series, we have seen how to extend the Red Hat CodeReady Workspaces base image to include extra tooling and certificates. We have registered everything as a custom stack within the administration portal. Finally, we started a new workspace containing everything we need to code, compile, deploy, debug, and package our JEE/JBoss EAP application.&lt;/p&gt; &lt;p&gt;Stay tuned for part 2, in which we&amp;#8217;ll see how to configure this workspace for performing these various actions. We&amp;#8217;ll see how to make everything easily reproducible and distributable through Red Hat CodeReady Workspaces Factory.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#38;linkname=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F21%2Fcodeready-workspaces-streamline-jboss-eap-development%2F&amp;#038;title=Streamline%20your%20JBoss%20EAP%20dev%20environment%20with%20Red%20Hat%20CodeReady%20Workspaces%3A%20Part%201" data-a2a-url="https://developers.redhat.com/blog/2019/01/21/codeready-workspaces-streamline-jboss-eap-development/" data-a2a-title="Streamline your JBoss EAP dev environment with Red Hat CodeReady Workspaces: Part 1"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/21/codeready-workspaces-streamline-jboss-eap-development/"&gt;Streamline your JBoss EAP dev environment with Red Hat CodeReady Workspaces: Part 1&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/AZEgHZ9dA10" height="1" width="1" alt=""/&gt;</content><summary>It has been just one month since the announcement of the release of Red Hat CodeReady Workspaces 1.0.0 Beta. Because the cloud/browser-based IDE may be full of promises, developers are usually suspicious, considering them as toys for occasional coders but not suitable for software craftsmen. But you’ll quickly see that Red Hat’s offering can be a good companion for building tailor-made environment...</summary><dc:creator>Laurent Broudoux</dc:creator><dc:date>2019-01-21T13:00:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/21/codeready-workspaces-streamline-jboss-eap-development/</feedburner:origLink></entry><entry><title>JGroups 4.0.16</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rQ28QgYWM5w/jgroups-4016.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-jgroups_4_0_16</id><updated>2019-01-21T08:31:34Z</updated><published>2019-01-21T08:31:00Z</published><content type="html">I just released 4.0.16. The most important features/bug fixes are (for a comprehensive list see [1]):&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Better mechanism to detect whether IPv4 or IPv6 addresses need to be used. This eliminates the need to use &lt;span style="font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;java.net.preferIPv4Stack&lt;/span&gt; (unless forcing the use of IPv4 addresses)&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2305"&gt;https://issues.jboss.org/browse/JGRP-2305&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;Due to a regression, MULTI_PING didn't work any longer. This was fixed in &lt;a href="https://issues.jboss.org/browse/JGRP-2319"&gt;https://issues.jboss.org/browse/JGRP-2319&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Bug fixes in DNS_PING (used for running in Kubernetes/Openshift clouds):&amp;nbsp;&lt;/li&gt;&lt;ul&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2296"&gt;https://issues.jboss.org/browse/JGRP-2296&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2300"&gt;https://issues.jboss.org/browse/JGRP-2300&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2314"&gt;https://issues.jboss.org/browse/JGRP-2314&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2316"&gt;https://issues.jboss.org/browse/JGRP-2316&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href="https://issues.jboss.org/browse/JGRP-2309"&gt;https://issues.jboss.org/browse/JGRP-2309&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;ASYM_ENCRYPT&lt;/li&gt;&lt;ul&gt;&lt;li&gt;Pooled ciphers were not correctly re-initialized: &lt;a href="https://issues.jboss.org/browse/JGRP-2279"&gt;https://issues.jboss.org/browse/JGRP-2279&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Concurrent access to pooled ciphers can lead to decryption errors: &lt;a href="https://issues.jboss.org/browse/JGRP-2315"&gt;https://issues.jboss.org/browse/JGRP-2315&lt;/a&gt; &lt;/li&gt;&lt;/ul&gt;&lt;li&gt;FILE_PING (and all subclasses, e.g. S3_PING) had an issue with merging: &lt;a href="https://issues.jboss.org/browse/JGRP-2288"&gt;https://issues.jboss.org/browse/JGRP-2288&lt;/a&gt;&lt;/li&gt;&lt;li&gt;slf4j doesn't work: &lt;a href="https://issues.jboss.org/browse/JGRP-2307"&gt;https://issues.jboss.org/browse/JGRP-2307&lt;/a&gt;&lt;/li&gt;&lt;li&gt;LazyThreadFactory leaks threads: &lt;a href="https://issues.jboss.org/browse/JGRP-2312"&gt;https://issues.jboss.org/browse/JGRP-2312&lt;/a&gt;&lt;/li&gt;&lt;li&gt;TransferQueueBundler (default): view changes lead to dropping of messages to non-members; leading to issues such as delaying the leaving of a member: &lt;a href="https://issues.jboss.org/browse/JGRP-2324"&gt;https://issues.jboss.org/browse/JGRP-2324&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;Enjoy! &lt;br /&gt;&lt;br /&gt;[1] &lt;a href="https://issues.jboss.org/projects/JGRP/versions/12339241"&gt;https://issues.jboss.org/projects/JGRP/versions/12339241&lt;/a&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rQ28QgYWM5w" height="1" width="1" alt=""/&gt;</content><summary>I just released 4.0.16. The most important features/bug fixes are (for a comprehensive list see [1]): Better mechanism to detect whether IPv4 or IPv6 addresses need to be used. This eliminates the need to use java.net.preferIPv4Stack (unless forcing the use of IPv4 addresses) https://issues.jboss.org/browse/JGRP-2305 Due to a regression, MULTI_PING didn't work any longer. This was fixed in https:/...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2019-01-21T08:31:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2019/01/jgroups-4016.html</feedburner:origLink></entry><entry><title>Hibernate Community Newsletter 02/2019</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/HVeR6p5EYHk/" /><category term="Discussions" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="Hibernate ORM" scheme="searchisko:content:tags" /><category term="newsletter" scheme="searchisko:content:tags" /><author><name>Vlad Mihalcea</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_community_newsletter_02_2019</id><updated>2019-01-22T08:27:50Z</updated><published>2019-01-21T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="articles"&gt;&lt;a class="anchor" href="#articles"&gt;&lt;/a&gt;Articles&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When fetching parent entities along with their child associations, Hibernate applies the root-level pagination in-memory while the SQL query fetches all the data matching the provided filtering criteria. When paginating entity results in-memory, Hibernate issues the following warning message in the application log:&lt;/p&gt; &lt;/div&gt; &lt;div class="exampleblock"&gt; &lt;div class="content"&gt; &lt;div class="listingblock"&gt; &lt;div class="content"&gt; &lt;pre class="CodeRay highlight"&gt;&lt;code data-lang="text"&gt;HHH000104: firstResult/maxResults specified with collection fetch; applying in memory!&lt;/code&gt;&lt;/pre&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;However, if the number of parent and child records is large, it’s much more efficient to apply SQL-level pagination. &lt;a href="https://vladmihalcea.com/fix-hibernate-hhh000104-entity-fetch-pagination-warning-message/"&gt;This article&lt;/a&gt; explains how to limit the number of parent entities that are fetched along with their associated child records.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;By default, Hibernate loads all entity properties when fetching an entity, and this might not be very efficient if you have Blob/Clob or large columns. For this purpose, Hibernate offers the bytecode enhancement mechanism which can be configured to load entity attributes lazily. &lt;a href="https://rieckpil.de/how-to-lazy-loading-of-jpa-attributes-with-hibernate/"&gt;This article&lt;/a&gt; provides more details about the &lt;code&gt;enableLazyInitialization&lt;/code&gt; bytecode enhancement mode.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When logging SQL statements, it’s very useful to print the underlying database transaction id so you can later aggregate the SQL statements by their associated transaction id. &lt;a href="https://vladmihalcea.com/current-database-transaction-id/"&gt;This article&lt;/a&gt; shows you how you can fetch the database transaction id when using Oracle, SQL Server, PostgreSQL, and MySQL.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To help you find the source of an issue, Hibernate provides context-specific exceptions. &lt;a href="https://www.baeldung.com/hibernate-exceptions"&gt;This article&lt;/a&gt; provides a comprehensive list of exception types that can be thrown by Hibernate as well as how you can overcome the underlying problem that triggered each exception.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The entity identifier can be either manually assigned or generated automatically. For the auto-generated entity identifiers, you can choose an auto-incremented numeric column or a UUID. If you want to use a UUID identifier, &lt;a href="https://jivimberg.io/blog/2018/11/05/using-uuid-on-spring-data-jpa-entities/"&gt;this article&lt;/a&gt; explains how to optimize the generated SQL statements when persisting the entity using Spring Data Repositories.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you want to map an entity whose Primary Key is formed out of multiple columns, you need to use a composite identifier. &lt;a href="https://hellokoding.com/jpa-hibernate-composite-primary-key-entity-mapping-example-with-mysql/"&gt;This article&lt;/a&gt; demonstrates how you can achieve this goal using the Hibernate-specific multiple &lt;code&gt;@Id&lt;/code&gt; mapping.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;When using JPA and Hibernate, the link table of a many-to-many table relationship is hidden at the entity modeling level, as only the parent sides need to be mapped. &lt;a href="https://hellokoding.com/jpa-many-to-many-relationship-mapping-example-with-spring-boot-maven-and-mysql/"&gt;This article&lt;/a&gt; shows you how to map a many-to-many relationship with JPA, Hibernate and Spring Boot.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="questions-and-answers"&gt;&lt;a class="anchor" href="#questions-and-answers"&gt;&lt;/a&gt;Questions and answers&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-avoid-updating-column-values-as-null-using-dynamicupdate/1988/2"&gt;How to prevent Hibernate from updating column values as null in a PUT web request when the entity uses @DynamicUpdate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/14102334/how-to-prevent-sql-injection-in-hibernate/54122517#54122517"&gt;How to prevent SQL Injection with JPA and Hibernate?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/40420794/how-to-use-hibernate-register-function-in-hql-query/40421088#40421088"&gt;How to use Hibernate register function in HQL query&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/database-update-2nd-level-cache-on-two-components/2009"&gt;How to synchronize the Hibernate second-level cache with the database across multiple JVMs&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-map-a-column-to-a-jpa-property-if-it-was-already-mapped-in-an-manytoone-association-when-using-hibernate/2013"&gt;How to map a column to a JPA property if it was already mapped in an @ManyToOne association when using Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/hibernate-issuing-individual-insert-statements-even-though-batch-insert-is-enabled/2014"&gt;Hibernate issuing individual insert statements, even though batch insert is enabled&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/40420794/how-to-register-sql-functions-so-that-you-can-call-them-hql-queries-with-jpa-and/40421088#40421088"&gt;How to register SQL functions so that you can call them in JPQL or HQL queries with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/configure-log4j-2-to-store-logging-information-in-database-table-using-hibernate/2024"&gt;Configure Log4j 2 to store the logging information in a database table using Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/hibernate-n-1-query-issue-when-fetching-onetoone-associations-with-jpa-criteria-and-lazytoone/2037"&gt;Hibernate N+1 query issue when fetching @OneToOne associations with JPA Criteria and @LazyToOne&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/can-no-longer-use-mappedsuperclass-and-inheritance-annotations-in-hibernate-5-4/2016"&gt;Can no longer use @MappedSuperclass and @Inheritance annotations in Hibernate 5.4 &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-update-a-timestamp-property-when-only-some-entity-fields-get-modified-with-jpa-and-hibernate/2050"&gt;How to update a Timestamp property when only some entity fields get modified with JPA and Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/18534502/oracle-transaction-id-of-transaction-that-caused-trigger/54224570#54224570"&gt;How to get the Oracle transaction id of the transaction that caused a trigger&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/26620966/mysql-5-5-getting-the-current-transaction-id/54224636#54224636"&gt;Getting the current transaction ID with MySQL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/how-to-set-sql-server-options-ansi-nulls-ansi-padding-ansi-warnings-using-hibernate/2073"&gt;How to set SQL Server options (ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS) using Hibernate&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/why-does-hibernate-execute-2-sql-query-when-using-a-pessimistic-write-lockmode-on-a-jpql-query/2075"&gt;Why does Hibernate execute 2 SQL query when using a PESSIMISTIC_WRITE LockMode on a JPQL query?&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/t/mysql-rollback-not-working/2077"&gt;Rollback does not work with MyISAM storage engine with Hibernate and MySQL&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://stackoverflow.com/questions/31470414/jpa-orphan-removal-does-not-work-for-onetoone-relations/31471415#31471415"&gt;JPA orphan removal does not work for OneToOne relations&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/HVeR6p5EYHk" height="1" width="1" alt=""/&gt;</content><summary>Welcome to the Hibernate community newsletter in which we share blog posts, forum, and StackOverflow questions that are especially relevant to our users. Articles When fetching parent entities along with their child associations, Hibernate applies the root-level pagination in-memory while the SQL query fetches all the data matching the provided filtering criteria. When paginating entity results in...</summary><dc:creator>Vlad Mihalcea</dc:creator><dc:date>2019-01-21T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2019/01/21/hibernate-community-newsletter-2019-02/</feedburner:origLink></entry><entry><title>Using WildFly Elytron with the Netty HttpServerCodec</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nlSPCVbdN9w/using-wildfly-elytron-with-netty.html" /><category term="authentication" scheme="searchisko:content:tags" /><category term="Basic" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_jbossas" scheme="searchisko:content:tags" /><category term="feed_name_darrans_wildfly_blog" scheme="searchisko:content:tags" /><category term="HTTP" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="netty" scheme="searchisko:content:tags" /><author><name>Darran Lofthouse</name></author><id>searchisko:content:id:jbossorg_blog-using_wildfly_elytron_with_the_netty_httpservercodec</id><updated>2019-01-19T17:05:25Z</updated><published>2019-01-19T17:05:00Z</published><content type="html">The WildFly Elytron project was developed to meet the needs if the WildFly application server, however the APIs and SPIs within this project also allow us to use the project in other environments.&lt;br /&gt;&lt;br /&gt;A couple of previous blogs from Farah Juma and myself have highlighted a couple of these environments already: -&lt;br /&gt;&amp;nbsp;&lt;a href="https://darranl.blogspot.com/2017/09/using-wildfly-elytron-with-undertow.html" target="_blank"&gt;Using WildFly Elytron with Undertow Standalone&lt;/a&gt;&lt;br /&gt;&amp;nbsp;&lt;a href="https://developer.jboss.org/people/fjuma/blog/2019/01/07/securing-an-embedded-jetty-server-using-elytron" target="_blank"&gt;Securing an embedded Jetty server using Elytron&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Also I have previously published a blog describing how to implement a custom HTTP authentication mechanism using the WildFly Elytron SPIs.&lt;br /&gt;&lt;a href="https://darranl.blogspot.com/2018/02/wildfly-elytron-implementing-custom.html" target="_blank"&gt;WildFly Elytron - Implementing a Custom HTTP Authentication Mechanism&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Being able to take a single security project and use it in multiple environments has numerous benefits, some of which are: -&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Only needing to learn one framework instead of one framework per server type.&lt;/li&gt;&lt;li&gt;Portability of custom implementation such as authentication mechanisms or security realms which can be used in all environments.&lt;/li&gt;&lt;li&gt;The ability to combine multiple servers into a single process whilst using common security SPIs.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;This blog post is to introduce the integration of WildFly Elytron with the Netty HttpServerCodec for HTTP authentication.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It is worth noting this integration is specifically making use of Netty's &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;HttpServerCodec&lt;/span&gt; for integration, if an alternative HTTP server was developed on Netty then an alternative integration with WildFly Elytron would also be required.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The project containing the Netty integration code can be found on GitHub at&amp;nbsp;&lt;a href="https://github.com/wildfly-security/elytron-web-netty" target="_blank"&gt;elytron-web-netty&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As an integration project this project only exposes once class as public API '&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;org.wildfly.elytron.web.netty.server.ElytronHandlers&lt;/span&gt;'&amp;nbsp; - the purpose this class is to take configured WildFly Elytron components and use them to insert a set of handlers into a Netty ChannelPipeline, once inserted they will perform authentication kaing use of Wildfly Elytron.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The example project can be found on GitHub at&amp;nbsp;&lt;a href="https://github.com/wildfly-security-incubator/elytron-examples/tree/master/netty-standalone" target="_blank"&gt;netty-standalone&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;After checking out the example project it can be built using maven: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;mvn clean instal&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And then once build can also be executed using maven: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &lt;span style="color: lime; font-family: inherit;"&gt;mvn exec:exec&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Once running you can navigate to&amp;nbsp;&lt;a href="http://localhost:7776/" target="_blank"&gt;http://localhost:7776/&lt;/a&gt;&amp;nbsp;and access the application using the username 'alice' with the password 'alice123+', if successful you should see the following response: -&lt;/div&gt;&lt;br /&gt;&lt;pre style="overflow-wrap: break-word; white-space: pre-wrap;"&gt;&lt;span style="color: lime;"&gt;Current identity 'alice'&lt;/span&gt;&lt;/pre&gt;&lt;pre style="overflow-wrap: break-word; white-space: pre-wrap;"&gt;&lt;br /&gt;&lt;/pre&gt;Now that the example project is running we can look into the details as to how WildFly Elytron was activated.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Activation&lt;/h3&gt;&lt;div&gt;Within Netty a &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ChannelInitializer&lt;/span&gt; is required to add the handlers to the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ChannelPipeline&lt;/span&gt;, within the example project this is within the class '&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;org.wildfly.security.examples.TestInitialiser&lt;/span&gt;' and is implemented as: -&lt;br /&gt;&lt;div&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;protected void initChannel(SocketChannel ch) throws Exception {&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; ChannelPipeline pipeline = ch.pipeline();&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; pipeline.addLast(new HttpServerCodec());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; pipeline.addLast(new HttpServerExpectContinueHandler());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; securityHandler.apply(pipeline);&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; pipeline.addLast(new TestContentHandler());&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;}&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The 'securityHandler' within the example block of code is actually an instance of the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ElytronHandlers&lt;/span&gt; class, it is worth noting that it can be cached and re-used potentially performing many initialisations concurrently.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;As the example projects starts up the&amp;nbsp;&lt;span style="color: lime; font-family: &amp;quot;Courier New&amp;quot;, Courier, monospace;"&gt;ElytronHandlers&lt;/span&gt;&amp;nbsp;is initialised as follows: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ElytronHandlers securityHandlers = ElytronHandlers.newInstance()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setSecurityDomain(securityDomain)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setFactory(createHttpAuthenticationFactory())&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .setMechanismConfigurationSelector(MechanismConfigurationSelector.constantSelector(&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; MechanismConfiguration.builder()&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .addMechanismRealm(MechanismRealmConfiguration.builder().setRealmName("Elytron Realm").build())&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; .build()));&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This initialisation takes a pre-configured &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;SecurityDomain&lt;/span&gt; and &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;HttpAuthenticationFactory&lt;/span&gt; and adds a &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;MechanismConfigurationSelector&lt;/span&gt;, these have been covered on prior blogs so I am not going to cover the details of these again here although they can all be seen within the&amp;nbsp;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;org.wildfly.security.examples.HelloWorld&lt;/span&gt; class to see how these are initialised.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;One further method not used in this example is: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;public ElytronHandlers setAuthenticationRequired(final Predicate&amp;lt;HttpRequest&amp;gt; authenticationRequired)&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;This can be used to add a &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;Predicate&lt;/span&gt; to decide on a request by request basis if authentication is required after inspecting the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;HttpRequest&lt;/span&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Outcome&lt;/h3&gt;&lt;div&gt;After the initialisation described above the channel end up with the following handlers defined on it's pipeline: -&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://4.bp.blogspot.com/-qzwr_ggP7gU/XENVCQWyo5I/AAAAAAAAF4k/po89IXk3p4IFJ8B2rltpIiOD46oHLdfqACLcBGAs/s1600/Netty%2BHandlers%2B%25281%2529.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="413" data-original-width="547" height="481" src="https://4.bp.blogspot.com/-qzwr_ggP7gU/XENVCQWyo5I/AAAAAAAAF4k/po89IXk3p4IFJ8B2rltpIiOD46oHLdfqACLcBGAs/s640/Netty%2BHandlers%2B%25281%2529.png" width="640" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div&gt;For a request after being handled by the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;HttpServerCodec&lt;/span&gt; handler it will pass so the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ElytronInboundHandler&lt;/span&gt;, this is where the authentication by WildFly Elytron takes place and a &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;SecurityIdentity&lt;/span&gt; is established.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If authentication fails the request can be turned around at this stage and sent back to the client.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Our next inbound handler is the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ElytronRunAsHandler&lt;/span&gt;, this handler is responsible for taking any established &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;SecurityIdentity&lt;/span&gt; and ensuring it is associated with the current thread.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In this set up we have one outbound handler which is the &lt;span style="color: lime; font-family: Courier New, Courier, monospace;"&gt;ElytronOutboundHandler&lt;/span&gt;, this handler is called for all messages being sent back to the client is responsible for setting any security related HTTP headers that need to be set on the respone message.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;Contribution&lt;/h3&gt;&lt;div&gt;The Netty integration project is currently tagged as a Beta as a number of areas still need to be developed, if anyone is interested in contributing their contributions will be welcome.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Completing the implementation of the ElytronHttpExchange class: -&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Support for all Scope types.&lt;/li&gt;&lt;li&gt;Parsing of request parameters.&lt;/li&gt;&lt;li&gt;Cookie support.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Request InputStream handling.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Improved response OutputStream handling.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Adding support for authorization, either role based checks or Java permission checks.&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Further enhancement of the test cases including adding more mechanisms to be tested.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Outside of the Netty integration there are other projects out there still possible options for integration, some of these are: -&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Tomcat&lt;/li&gt;&lt;li&gt;Pure servlet integration.&lt;/li&gt;&lt;li&gt;EE Security integration.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;For all integrations some form of common testsuite to verify the full permutation of authentication mechanisms available within WildFly Elytron.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nlSPCVbdN9w" height="1" width="1" alt=""/&gt;</content><summary>The WildFly Elytron project was developed to meet the needs if the WildFly application server, however the APIs and SPIs within this project also allow us to use the project in other environments. A couple of previous blogs from Farah Juma and myself have highlighted a couple of these environments already: -  Using WildFly Elytron with Undertow Standalone  Securing an embedded Jetty server using E...</summary><dc:creator>Darran Lofthouse</dc:creator><dc:date>2019-01-19T17:05:00Z</dc:date><feedburner:origLink>http://darranl.blogspot.com/2019/01/using-wildfly-elytron-with-netty.html</feedburner:origLink></entry><entry><title>Teiid Runtimes Explained</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/VJHRGur2ouw/teiid-runtimes-explained.html" /><category term="feed_group_name_teiid" scheme="searchisko:content:tags" /><category term="feed_name_teiid" scheme="searchisko:content:tags" /><author><name>Ramesh Reddy</name></author><id>searchisko:content:id:jbossorg_blog-teiid_runtimes_explained</id><updated>2019-01-18T22:35:57Z</updated><published>2019-01-18T22:35:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;br /&gt;If you have been following &lt;a href="https://teiid.io/"&gt;Teiid&lt;/a&gt; lately we have been going through a whole lot of renovations. Yes, renovations or reorganization or refactoring or whatever you want to call it. Basically, we are making Teiid more modular with fewer dependencies that can be used by however your use case&amp;nbsp;dictates rather than use it as one monolith&amp;nbsp;application deployed into WildFly JEE Application Server. There is nothing wrong in using Teiid as server&amp;nbsp;model, but with the proliferation&amp;nbsp;of container-based workloads and cloud-based&amp;nbsp;architectures, the previous server-based model does not work or simply won't scale. So, we needed to think of alternatives, thus Teiid team introduced a couple different versions modular Teiid what we are calling as "Teiid Runtimes".&lt;br /&gt;&lt;br /&gt;Note that in these modular Teiid runtimes, not all the features you were used to using&amp;nbsp;in Teiid Server model may not be there but you will have extensions to add in those that are most appropriate for your domain. If you are looking for a data virtualization system in any configuration, one of below should satisfy your needs.&lt;br /&gt;&lt;br /&gt;Now that we know what Teiid is up to, what are different flavors of these Runtimes? Basically, we have four different varieties.&lt;br /&gt;&lt;br /&gt;&lt;ol style="text-align: left;"&gt;&lt;li&gt;Teiid Server with &lt;a href="http://wildfly.org/"&gt;WildFly&lt;/a&gt; (legacy model)&lt;/li&gt;&lt;li&gt;Teiid&amp;nbsp;Embedded&lt;/li&gt;&lt;li&gt;Teiid &lt;a href="https://spring.io/projects/spring-boot"&gt;Spring Boot&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Teiid &lt;a href="https://thorntail.io/"&gt;Thorntail&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Teiid Server on WildFly&lt;/h3&gt;&lt;div&gt;This is the legacy runtime that Teiid team has been supporting for a while, the support for this will be continuing to new versions of WildFly. Currently, with the release of &lt;a href="http://teiid.io/teiid_runtimes/teiid_wildfly/downloads/"&gt;Teiid 12.0&lt;/a&gt;, the WildFly support is at &lt;a href="http://wildfly.org/downloads/"&gt;WildFly 14.&lt;/a&gt;&amp;nbsp; Going forward there will be a separate repo for the WildFly based deployments that is different&amp;nbsp;from current Teiid git repo. This repository will contain only code that is specific to WildFly. To use this version one needs to be little knowledgable in WildFly server, but typically no Java experience is needed but recommended.&amp;nbsp; If you want you can build Docker images based on this as a Server just like say MySQL or PostgreSQL image.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid/tree/master/wildfly"&gt;GitRepo&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-quickstarts"&gt;Examples&lt;/a&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Teiid Embedded&lt;/h3&gt;&lt;div&gt;I would call this and rest of other runtimes below as "frameworks" where they do not provide a fully functioning system, but Teiid provides the essential APIs and hooks to design your own system with ease. Teiid Embedded is the plainest version of all, where you have a whole lot of autonomy to design to your use case and embed Teiid in your own JVM. There are plenty of examples to you started. When using this Java experience is required. This is ideal for anyone wanting to embed in their own project/product in OEM fashion.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid"&gt;GitRepo&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-embedded-examples"&gt;Examples&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Teiid Spring Boot&lt;/h3&gt;&lt;div&gt;It is no secret that Spring Boot most popular among Java developers. This runtime uses Spring Boot and Teiid Embedded&amp;nbsp;to bring Data Virtualization features for Java developer in a way that they are already familiar to them. For example, it is as simple as using JPA framework. This one is my current favorite, as this supports legacy VDB file based deployments and also JPA based view definitions where explicit VDB does not need to be defined. It also has a feature&amp;nbsp;called "redirection", where it can make it possible to use production data for testing without modifying it. If you are Spring Boot developer there is not much more you need to learn as most of the Data Virtualization will be instrumented in by using a set of annotations. This would be an ideal framework to use if you are thinking of using Teiid in Microservices architecture. If you are looking into container-based deployments and cloud architectures this is an ideal platform. The examples will show how to deploy into OpenShift or Kubernetes using &lt;a href="https://maven.fabric8.io/"&gt;fabric8-maven-plugin&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There is limited support for different sources currently we only support &lt;a href="https://github.com/teiid/teiid-spring-boot/tree/master/samples/rdbms-file"&gt;relational sources&lt;/a&gt;, &lt;a href="https://github.com/teiid/teiid-spring-boot/tree/master/samples/excel"&gt;excel&lt;/a&gt;, &lt;a href="https://github.com/teiid/teiid-spring-boot/tree/master/samples/rest"&gt;REST&lt;/a&gt;. But this support will be expanding.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-spring-boot"&gt;GitRepo&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-spring-boot/tree/master/samples"&gt;Examples&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;Teiid Thorntail&lt;/h3&gt;&lt;div&gt;Thorntail is a Microprofile based Java framework that is designed for Java-based Microservices using standards-based technologies. Thorntail was previously named "WildFly Swarm".&amp;nbsp; Since this Thorntail 2.x technology was mostly based on WildFly there good support for most of the features that were available in Teiid Server. We will continue to support 2.x Thorntail.&amp;nbsp; If you want a system close to WildFly technology but in embedded Microservice style application then choose this version. this version is also good for using as container-based workloads for cloud environments. This supports similar features as spring boot in this area.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;When Thorntail 4.x rolls around we have to reevaluate the support there as that is assumed to be vastly different from Thorntail 2.x, and we expect that would be a complete rewrite.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-thorntail"&gt;GitRepo&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://github.com/teiid/teiid-thorntail/tree/master/examples"&gt;Examples&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style="text-align: left;"&gt;What about UI?&lt;/h3&gt;&lt;div&gt;As you probably noticed the pace of Teiid Designer releases stopped, as we are not putting in any more work into eclipse based tooling. The existing Teiid Designer should be still valid to use in the design of your VDBs if you prefer as they VDB you build will be deployable in any of the above Teiid Runtimes. However, Teiid Runtimes also support dynamic VDBs that one can build by hand or programmatically.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;We are also collaborating/integrating Teiid technology with Syndesis community, there you will see a UI to build and deploy Teiid based runtime. More on this later in future blogs.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Let us know your&amp;nbsp;opinion as we shape Teiid for future workloads while supporting the legacy.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Ramesh..&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/VJHRGur2ouw" height="1" width="1" alt=""/&gt;</content><summary>If you have been following Teiid lately we have been going through a whole lot of renovations. Yes, renovations or reorganization or refactoring or whatever you want to call it. Basically, we are making Teiid more modular with fewer dependencies that can be used by however your use case dictates rather than use it as one monolith application deployed into WildFly JEE Application Server. There is n...</summary><dc:creator>Ramesh Reddy</dc:creator><dc:date>2019-01-18T22:35:00Z</dc:date><feedburner:origLink>http://teiid.blogspot.com/2019/01/teiid-runtimes-explained.html</feedburner:origLink></entry><entry><title>Integration of storage services (part 6)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/hzH3HyLehQ0/" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="Architecture" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="Customer Experience" scheme="searchisko:content:tags" /><category term="developer" scheme="searchisko:content:tags" /><category term="devops" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Red Hat Customers" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="storage" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-integration_of_storage_services_part_6</id><updated>2019-01-18T21:40:38Z</updated><published>2019-01-18T21:40:38Z</published><content type="html">&lt;p&gt;In &lt;a href="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/"&gt;Part 5 this series&lt;/a&gt;, we looked into details that determine how your integration becomes the key to transforming your customer experience.&lt;/p&gt; &lt;p&gt;It started with laying out the process of how I&amp;#8217;ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it&amp;#8217;s time to cover various blueprint details.&lt;/p&gt; &lt;p&gt;This article covers the final elements in the blueprint, &lt;i&gt;storage services, &lt;/i&gt;which are fundamental to the generic architectural overview.&lt;/p&gt; &lt;p&gt;&lt;span id="more-554507"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Architectural details&lt;/h2&gt; &lt;p&gt;As mentioned before, the architectural details covered here are base on real customer integration solutions using open source technologies. The elements presented here are then the &lt;i&gt;generic common architectural elements&lt;/i&gt; that I&amp;#8217;ve identified and collected in a generic architectural blueprint. It&amp;#8217;s my intent to provide a blueprint that provides guidance and not deep technical details.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57.png"&gt;&lt;img class=" aligncenter wp-image-555447 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57-1024x163.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57-1024x163.png" alt="Storage services" width="640" height="102" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57-1024x163.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57-300x48.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57-768x122.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.47.57.png 1110w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Note that we&amp;#8217;re covering the visual representations as presented, but it&amp;#8217;s expected that they&amp;#8217;ll be evolving visually over time. There are many ways to represent each element in this architectural blueprint, but I&amp;#8217;ve chosen icons, text, and colors that I hope are going to make it all easy to absorb. Feel free to post comments at the bottom of this post, or &lt;a href="https://www.schabell.org/p/contact.html" target="_blank" rel="noopener"&gt;contact me directly&lt;/a&gt; with your feedback.&lt;/p&gt; &lt;p&gt;Now let&amp;#8217;s take a look at the details in this architecture and outline the elements uncovered in my research.&lt;/p&gt; &lt;h2&gt;Storage&lt;/h2&gt; &lt;p&gt;While every organization needs and certainly has chosen one or more the storage services described in this article, for completeness, I&amp;#8217;ve presented the most common choices found in my research.&lt;/p&gt; &lt;p&gt;The basic legacy solution every organization I researched had was a &lt;i&gt;virtual block storage (VBS)&lt;/i&gt; solution. It can be in your data center, on site in your developer machine, or hosted by almost any cloud provider. It provides the fixed-size raw storage capacity and must have consistent I/O performance with low-latency connectivity.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.37.52.png"&gt;&lt;img class=" aligncenter wp-image-555457 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.37.52.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.37.52.png" alt="Virtual block storage" width="332" height="49" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.37.52.png 332w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.37.52-300x44.png 300w" sizes="(max-width: 332px) 100vw, 332px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;When files and data sets become very large, then &lt;i&gt;object-based storage (OBS) &lt;/i&gt;becomes the service of choice. It&amp;#8217;s available on-premises or as services hosted by most cloud providers to ensure you can leverage the persistence of your choice for your specific use case.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.10.png"&gt;&lt;img class=" aligncenter wp-image-555467 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.10.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.10.png" alt="Object-based storage" width="333" height="47" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.10.png 333w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.10-300x42.png 300w" sizes="(max-width: 333px) 100vw, 333px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;For container-based applications and services, persistence is achieved with &lt;i&gt;container-native storage (CNS)&lt;/i&gt; solutions. As previously mentioned, central to all research I conducted was a distinct leaning towards the use of a &lt;a href="https://developers.redhat.com/blog/category/containers/"&gt;container&lt;/a&gt; platform for applications and &lt;a href="https://developers.redhat.com/blog/category/microservices/"&gt;microservices&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.02.png"&gt;&lt;img class=" aligncenter wp-image-555477 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.02.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.02.png" alt="Container-native storage" width="331" height="45" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.02.png 331w, https://developers.redhat.com/blog/wp-content/uploads/2019/01/Screenshot-2018-12-21-at-10.38.02-300x41.png 300w" sizes="(max-width: 331px) 100vw, 331px" /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;A need for storage for these container-based elements leads organizations to search for CNS solutions. Such a solution is native to the container platform and delivers the performance and ease of use desired by developers and architects constructing the integration solutions for omnichannel.&lt;/p&gt; &lt;p&gt;One key to our generic integration with these storage services lies in the previously discussed &lt;i&gt;integration data microservices&lt;/i&gt; that make all forms of storage services available across your architecture. These details are not all-telling, but should give you the guidance you&amp;#8217;d need to get started in your own architectural situations.&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s next&lt;/h2&gt; &lt;p&gt;This overview covers the container platform elements that make up our architecture blueprint for the omnichannel customer experience use case.&lt;/p&gt; &lt;p&gt;An overview of the series on omnichannel customer experience portfolio architecture blueprint can be found here:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/28/integration-is-key-to-customer-experience/"&gt;Part 1: How integration is key to customer experience&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/11/30/common-architectural-elements-for-modern-integration-architectures/"&gt;Part 2: Common architectural elements for modern integration architectures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/14/integration-of-external-application-details-part-3/"&gt;Part 3: Integration of external application details&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/12/20/integration-of-api-management-details-part-4/"&gt;Part 4: Integration of API management details&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/01/04/integration-of-container-platform-essentials-part-5/" target="_blank" rel="noopener"&gt;Part 5: Integration of container platform essentials&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Part 6: Integration of storage services (this article)&lt;/li&gt; &lt;li&gt;Part 7: Application integration details&lt;/li&gt; &lt;li&gt;Part 8: Dissecting several specific application integration architectures&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Catch up on any articles you missed by following one of the links above.&lt;/p&gt; &lt;p&gt;Next in this series, we start taking a look at specific integration architectures that tie in all the elements we&amp;#8217;ve discussed as part of a specific case in an architecture for omnichannel customer experience.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#38;linkname=Integration%20of%20storage%20services%20%28part%206%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F01%2F18%2Fintegration-of-storage-services-part-6%2F&amp;#038;title=Integration%20of%20storage%20services%20%28part%206%29" data-a2a-url="https://developers.redhat.com/blog/2019/01/18/integration-of-storage-services-part-6/" data-a2a-title="Integration of storage services (part 6)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/01/18/integration-of-storage-services-part-6/"&gt;Integration of storage services (part 6)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/hzH3HyLehQ0" height="1" width="1" alt=""/&gt;</content><summary>In Part 5 this series, we looked into details that determine how your integration becomes the key to transforming your customer experience. It started with laying out the process of how I’ve approached the use case by researching successful customer portfolio solutions as the basis for a generic architectural blueprint. Now it’s time to cover various blueprint details. This article covers the fina...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-01-18T21:40:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/01/18/integration-of-storage-services-part-6/</feedburner:origLink></entry></feed>
